---
- name: Create a k8s namespace for Nexr Enterprise
  community.kubernetes.k8s:
    state: present
    definition:
      kind: Namespace
      api_version: v1
      metadata:
        name: "{{ k8s_namespace }}"
        labels:
          app: nexr-enterprise
          istio-injection: disabled

## 역할 기반 접근 제어(role-based access control, RBAC)는 컴퓨터 시스템 보안에서 권한이 있는 사용자들에게 시스템 접근을 통제하는 한 방법
# pods, service, configmap은 조회만가능.
# service,proxy,role,rolebinding은 "bind", "create", "get", "update", "patch", "list", "delete", "watch 가능.
- name: Add namespace default RBAC - role
  community.kubernetes.k8s:
    state: present
    namespace: "{{ k8s_namespace }}"
    definition: "{{ lookup('template', 'default_role.yml') | from_yaml }}"

- name: Add namespace default RBAC - rolebinding
  community.kubernetes.k8s:
    state: present
    namespace: "{{ k8s_namespace }}"
    definition: "{{ lookup('template', 'default_rolebinding.yml') | from_yaml }}"


## bootstrap relay에서 요청하는 api 파라미터값 name,accesskey랑 secretrey를 넣는지 안넣는지 확인.
- name: Create Bucket - NE User
  amazon.aws.s3_bucket:
    name: "{{ s3.bucket }}"
    s3_url: "http://{{ s3.endpoint }}"
    access_key: "{{ s3.accesskey }}"
    secret_key: "{{ s3.secretkey }}"
    ceph: true

- name: Create Spark log directory
  amazon.aws.aws_s3:
    bucket: "{{ s3.bucket }}"
    object: "/var/log/spark/hello"
    src: "/home/centos/hello"
    mode: put
    encrypt: false
    rgw: true
    s3_url: "http://{{ s3.endpoint }}"
    access_key: "{{ s3.accesskey }}"
    secret_key: "{{ s3.secretkey }}"

- name: Create Bucket - ETCD Backup
  amazon.aws.s3_bucket:
    name: "{{ s3.backup_bucket }}"
    s3_url: "http://{{ s3.endpoint }}"
    access_key: "{{ s3.accesskey }}"
    secret_key: "{{ s3.secretkey }}"
    ceph: true


- name: Deploy pxc-operator chart
  community.kubernetes.helm:
    name: pxc-operator
    chart_ref: "{{ chart_repo_name }}/pxc-operator"
    chart_version: "{{ ne_version }}"
    release_namespace: "{{ k8s_namespace }}"
    wait: yes
    atomic: yes

- name: Deploy pmm-server chart
  community.kubernetes.helm:
    name: pmm-server
    chart_ref: "{{ chart_repo_name }}/pmm-server"
    chart_version: "{{ ne_version }}"
    release_namespace: "{{ k8s_namespace }}"
    atomic: yes
    values: "{{ pmm_server['values'] | from_yaml }}"

- name: Deploy pxc-database chart
  community.kubernetes.helm:
    name: pxc-database
    chart_ref: "{{ chart_repo_name }}/pxc-database"
    chart_version: "{{ ne_version }}"
    release_namespace: "{{ k8s_namespace }}"
    wait: yes
    atomic: yes
    values: "{{ pxc_database['values'] | from_yaml }}"

- name: Wait for pxc-database-pxc-2 pod running ready completely
  community.kubernetes.k8s_info:
    kind: Pod
    namespace: "{{ k8s_namespace }}"
    name: "pxc-database-pxc-2"
    wait: yes
    wait_condition:
      status: "True"
      type: "Ready"
  register: result
  until: "{{ result.resources|length == 1 }}"
  retries: 50
  delay: 10

## 
- name: Deploy ne-init chart
  community.kubernetes.helm:
    name: ne-init
    chart_ref: "{{ chart_repo_name }}/ne-init"
    chart_version: "{{ ne_version }}"
    release_namespace: "{{ k8s_namespace }}"
    wait: yes
    atomic: yes
    values: "{{ ne_init['values'] | from_yaml }}"

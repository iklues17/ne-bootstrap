---
- name: Change Values - NE Post
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/43/configs/26/profiles/26/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  # loop: "{{ query('dict', lookup('file','values/ne-post.yaml', errors='ignore') | from_yaml, errors='ignore') | default([]) }}"
  loop: "{{ query('dict', ne_post['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Wait for hive-metastore pod running ready completely
  community.kubernetes.k8s_info:
    kind: Deployment
    namespace: "{{ k8s_namespace }}"
    name: "hive-metastore"
    wait: yes
    wait_condition:
      status: "True"
      type: "Available"
    wait_sleep: 10
    wait_timeout: 120

- name: Deploy - NE Post
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/43/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - NE Post
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"

- name: Change Values - EDS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/12/configs/10/profiles/10/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  loop: "{{ query('dict', eds['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Deploy - EDS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/12/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - EDS
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"

- name: Change Values - CMS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/5/configs/3/profiles/3/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  loop: "{{ query('dict', cms['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Reset Elasticsearch index - constatntine-error-log
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/elasticsearch-client:9200/proxy/constantine-error-log"
    method: DELETE
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
  register: response
  ignore_errors: yes

- name: Result Reset Elasticsearch index
  debug:
    var: response

- name: Deploy - CMS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/5/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - CMS
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"

- name: Change Values - DES
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/6/configs/4/profiles/4/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  loop: "{{ query('dict', des['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Deploy - DES
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/6/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - DES
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"

- name: Change Values - DSS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/10/configs/8/profiles/8/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  loop: "{{ query('dict', dss['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Deploy - DSS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/10/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - DSS
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"

- name: Change Values - DVS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/11/configs/9/profiles/9/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  loop: "{{ query('dict', dvs['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Deploy - DVS
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/11/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - DVS
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"

- name: Change Values - Logstash
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/44/configs/27/profiles/27/contents/{{ item.key }}"
    method: PUT
    body_format: json
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
    body:
      configValue: "{{ item.value }}"
  loop: "{{ query('dict', logstash['values'], errors='ignore') | default([]) }}"
  loop_control:
    label: "{{ item.key }} - {{ item.value }}"
    pause: 1

- name: Deploy - Logstash
  uri:
    url: "{{ k8s_api_server }}/api/v1/namespaces/{{ k8s_namespace }}/services/ccs:8180/proxy/applications/44/deploy"
    method: POST
    follow_redirects: all
    validate_certs: no
    timeout: "{{ ne_ccs_install_timeout }}"
    headers:
      Authorization: "Bearer {{ k8s_api_token }}"
      x-constantine-token: "{{ ne_accesstoken }}"
      content-type: application/json;charset=UTF-8
  register: response
  ignore_errors: yes

- name: Result Deploy - Logstash
  debug:
    var: response
  failed_when:
    - "{{ 'json' not in response }}"
    - "'ERROR' in '{{ response.json.status }}'"
    - "609000 != {{ response.json.errorCode }}"
